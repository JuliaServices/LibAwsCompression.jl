var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = LibAwsCompression","category":"page"},{"location":"#LibAwsCompression","page":"Home","title":"LibAwsCompression","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for LibAwsCompression.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [LibAwsCompression]","category":"page"},{"location":"#LibAwsCompression.AWS_C_COMPRESSION_PACKAGE_ID","page":"Home","title":"LibAwsCompression.AWS_C_COMPRESSION_PACKAGE_ID","text":"Documentation not found.\n\n\n\n\n\n","category":"constant"},{"location":"#LibAwsCompression.aws_compression_error","page":"Home","title":"LibAwsCompression.aws_compression_error","text":"aws_compression_error\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsCompression.aws_huffman_code","page":"Home","title":"LibAwsCompression.aws_huffman_code","text":"aws_huffman_code\n\nRepresents an encoded code\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsCompression.aws_huffman_decoder","page":"Home","title":"LibAwsCompression.aws_huffman_decoder","text":"aws_huffman_decoder\n\nStructure used for persistent decoding. Allows for reading from or writing to incomplete buffers.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsCompression.aws_huffman_encoder","page":"Home","title":"LibAwsCompression.aws_huffman_encoder","text":"aws_huffman_encoder\n\nStructure used for persistent encoding. Allows for reading from or writing to incomplete buffers.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsCompression.aws_huffman_symbol_coder","page":"Home","title":"LibAwsCompression.aws_huffman_symbol_coder","text":"aws_huffman_symbol_coder\n\nStructure used to define how symbols are encoded and decoded\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsCompression.aws_huffman_symbol_decoder_fn","page":"Home","title":"LibAwsCompression.aws_huffman_symbol_decoder_fn","text":"Function used to decode a code into a symbol\n\nArguments\n\nbits:[in] The bits to attept to decode a symbol from\nsymbol:[out] The symbol found. Do not write to if no valid symbol found\nuserdata:[in] Optional userdata (aws_huffman_symbol_coder.userdata)\n\nReturns\n\nThe number of bits read from bits\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsCompression.aws_huffman_symbol_encoder_fn","page":"Home","title":"LibAwsCompression.aws_huffman_symbol_encoder_fn","text":"Function used to encode a single symbol to an aws_huffman_code\n\nArguments\n\nsymbol:[in] The symbol to encode\nuserdata:[in] Optional userdata (aws_huffman_symbol_coder.userdata)\n\nReturns\n\nThe code representing the symbol. If this symbol is not recognized, return a code with num_bits set to 0.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsCompression.aws_compression_library_clean_up-Tuple{}","page":"Home","title":"LibAwsCompression.aws_compression_library_clean_up","text":"aws_compression_library_clean_up()\n\nClean up internal datastructures used by aws-c-compression. Must not be called until application is done using functionality in aws-c-compression.\n\nPrototype\n\nvoid aws_compression_library_clean_up(void);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsCompression.aws_compression_library_init-Tuple{Any}","page":"Home","title":"LibAwsCompression.aws_compression_library_init","text":"aws_compression_library_init(alloc)\n\nInitializes internal datastructures used by aws-c-compression. Must be called before using any functionality in aws-c-compression.\n\nPrototype\n\nvoid aws_compression_library_init(struct aws_allocator *alloc);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsCompression.aws_huffman_decode-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsCompression.aws_huffman_decode","text":"aws_huffman_decode(decoder, to_decode, output)\n\nDecodes a byte buffer into the provided symbol array.\n\nArguments\n\ndecoder:[in] The decoder object to use\nto_decode:[in] The encoded byte buffer to read from\noutput:[in] The buffer to write decoded symbols to. If decoder is set to allow growth, capacity will be increased when necessary.\n\nReturns\n\nAWS_OP_SUCCESS if encoding is successful, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_huffman_decode( struct aws_huffman_decoder *decoder, struct aws_byte_cursor *to_decode, struct aws_byte_buf *output);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsCompression.aws_huffman_decoder_allow_growth-Tuple{Any, Any}","page":"Home","title":"LibAwsCompression.aws_huffman_decoder_allow_growth","text":"aws_huffman_decoder_allow_growth(decoder, allow_growth)\n\nSet whether or not to increase capacity when the output buffer fills up while decoding. This is false by default.\n\nPrototype\n\nvoid aws_huffman_decoder_allow_growth(struct aws_huffman_decoder *decoder, bool allow_growth);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsCompression.aws_huffman_decoder_init-Tuple{Any, Any}","page":"Home","title":"LibAwsCompression.aws_huffman_decoder_init","text":"aws_huffman_decoder_init(decoder, coder)\n\nInitialize a decoder object with a symbol coder.\n\nPrototype\n\nvoid aws_huffman_decoder_init(struct aws_huffman_decoder *decoder, struct aws_huffman_symbol_coder *coder);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsCompression.aws_huffman_decoder_reset-Tuple{Any}","page":"Home","title":"LibAwsCompression.aws_huffman_decoder_reset","text":"aws_huffman_decoder_reset(decoder)\n\nResets a decoder for use with a new binary stream\n\nPrototype\n\nvoid aws_huffman_decoder_reset(struct aws_huffman_decoder *decoder);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsCompression.aws_huffman_encode-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsCompression.aws_huffman_encode","text":"aws_huffman_encode(encoder, to_encode, output)\n\nEncode a symbol buffer into the output buffer.\n\nArguments\n\nencoder:[in] The encoder object to use\nto_encode:[in] The symbol buffer to encode\noutput:[in] The buffer to write encoded bytes to\n\nReturns\n\nAWS_OP_SUCCESS if encoding is successful, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_huffman_encode( struct aws_huffman_encoder *encoder, struct aws_byte_cursor *to_encode, struct aws_byte_buf *output);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsCompression.aws_huffman_encoder_init-Tuple{Any, Any}","page":"Home","title":"LibAwsCompression.aws_huffman_encoder_init","text":"aws_huffman_encoder_init(encoder, coder)\n\nInitialize a encoder object with a symbol coder.\n\nPrototype\n\nvoid aws_huffman_encoder_init(struct aws_huffman_encoder *encoder, struct aws_huffman_symbol_coder *coder);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsCompression.aws_huffman_encoder_reset-Tuple{Any}","page":"Home","title":"LibAwsCompression.aws_huffman_encoder_reset","text":"aws_huffman_encoder_reset(encoder)\n\nResets a decoder for use with a new binary stream\n\nPrototype\n\nvoid aws_huffman_encoder_reset(struct aws_huffman_encoder *encoder);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsCompression.aws_huffman_get_encoded_length-Tuple{Any, Any}","page":"Home","title":"LibAwsCompression.aws_huffman_get_encoded_length","text":"aws_huffman_get_encoded_length(encoder, to_encode)\n\nGet the byte length of to_encode post-encoding.\n\nArguments\n\nencoder:[in] The encoder object to use\nto_encode:[in] The symbol buffer to encode\n\nReturns\n\nThe length of the encoded string.\n\nPrototype\n\nsize_t aws_huffman_get_encoded_length(struct aws_huffman_encoder *encoder, struct aws_byte_cursor to_encode);\n\n\n\n\n\n","category":"method"}]
}
